import logging

from telegram import ReplyKeyboardRemove, Update
from telegram.ext import CallbackContext, Job

from db.db import Db
from services.message_service import reply, send_message, up
from ui.news_builders import prepare_gigs_text

db = Db()

logger = logging.getLogger('A.get')
logger.setLevel(logging.DEBUG)


async def getgigs(update: Update, context: CallbackContext) -> None:
    """
    Callback function. Send list of artists with new concerts to user.
    Args:
        update, context: standart PTB callback signature
    TODO fail when no user
    """
    user_id = up(update)
    text = await prepare_gigs_text(user_id, request=True)
    if text:
        await reply(update, text, reply_markup=ReplyKeyboardRemove())
        logger.info(f'Gigs sent to user {user_id}')
        return None
    else:
        logger.info(f'Got empty gigs text. Nothing to send to {user_id}')
        return None


async def getgigs_job(context: CallbackContext) -> None:
    """
    Callback function for job scheduler. Send list of artists with new concerts to user.
    Args:
        context: context object generated by telegram.ext.Application
        when user adds lastfm useracc
    """
    logger.info('Start getEventsJob')
    if isinstance(context.job, Job):
        user_id = context.job.user_id
        chat_id = context.job.chat_id
        if user_id is None or chat_id is None:
            logger.warning(f'CONTEXT DOES NOT CONTAIN user_id or chat_id')
            return None
    else:
        logger.warning(f'CONTEXT DOES NOT CONTAIN JOB')
        return None
    assert user_id
    assert chat_id

    text = await prepare_gigs_text(user_id, request=False)
    if text:
        await send_message(context, chat_id, text)
        logger.info(f'Job done, gigs sent to user {user_id}')
        return None
    else:
        logger.info(f'Got empty gigs text. Nothing to send to {user_id}')
        return None
